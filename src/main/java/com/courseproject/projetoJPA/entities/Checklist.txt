Basic Attributes - private String/Integer/Instant/Double/Long example;

Associations - 1, 1..*, * e 0..1; Começar uma associação quando as duas classes já estiverem sido criadas;

Constructors - public Name() {}
Num2 = public Name(Long id, String name) { this.id = id; this.name = name; }

Getters & Setters(Collections(List): Only get) - Num3 = SetExample, GetExample

HashCode & Equals - Num5 = Função de comparar e não deixar repetir o atributo escolhido

Serializable - implements Serializable, private static final long serialVersionUID = 1L;

---------------------------------------------------------------------------------------------------------------------

<<pk>> = Primary key, as tabelas possuirão a mesma chave primária;
Exemplo: <<pk>> id: Integer = private Long id;

<<enum>> = Normalmente usado em status
Exemplo: WAITING_PAYMENT, PAID, SHIPPED;

orders | *  1 | client = Um cliente poderá ter vários pedidos
Exemplo: Order - @ManyToOne private User client; 
User - @JsonIgnore @OneToMany(mappedBy = "client") private List<Order> orders = new ArrayList<>(); + getOrders;

products | *  1..* | categories = Cada produto pode ter várias categorias e cada categoria pode ter vários produtos
Exemplo: Product - 	@ManyToMany(mappedBy = "products") private Set<Category> categories = new HashSet<>(); + getCategories;
Category - @ManyToMany @JoinTable(name = "tb_product_category", joinColumns = @JoinColumn(name = "category_id"), inverseJoinColumns = @JoinColumn(name = "product_id"))
private Set<Product> products = new HashSet<>(); + getProducts;

---- classe pontilhada no meio de uma ligação entre duas classes = criar subpasta .pk e montar a classe com:
@Embeddable, Serializable, @ManyToOne e @JoinColumn em cima dos atributos, Getters and Setters e HashCode com as duas classes
Usar a chave primária com o atributo da classe .pk na classe principal entre as duas classes (Ex: OrderItemPK e OrderItem)

order | 1  0..1 | payment = 1 pedido tem 1 pagamento e 1 pagamento tem 1 pedido
Payment = @OneToOne @MapsId private Order order;
Order = @OneToOne(mappedBy = "order", cascade = CascadeType.ALL) private Payment payment; + getPayment e setPayment

---------------------------------------------------------------------------------------------------------------------

Postman configurações
Headers = Key(Content-Type), Value(application/json)
Body = raw - JSON

pom.xml caso o h2-console não tenha permissão
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-devtools</artifactId>
</dependency>

download MongoDB
Criar data/db no C:
Escrever variáveis de ambiente no windows
Ir em path, depois editar
Clicar em novo e colocar o caminho C:\Program Files\MongoDB\Server\{versão}\bin
Ir no cmd e escrever mongod

Adicionar manualmente no MongoDB
ADD DATA -> Insert Document -> = -> + (Add field after)

Instalar JavaFX
Baixar SceneBuilder e lembrar o caminho da pasta
Baixar Javafx-sdk-17 = https://download2.gluonhq.com/openjfx/17/openjfx-17_windows-x64_bin-sdk.zip
Colar em uma pasta C:/java-libs
Help -> Install new software -> Work with -> http://download.eclipse.org/efxclipse/updates-released/3.4.1/site/ -> Install
Window -> Preferences -> JavaFX -> C:\Users\Diego Santana\AppData\Local\SceneBuilder\SceneBuilder.exe
Window -> Preferences -> Java -> Build Path -> User Libraries -> New(JavaFX) -> Add External JARs... -> C:/java-libs/lib/
File -> New -> Project -> JavaFX -> Next -> User Library -> JavaFX

Botão direito no projeto -> Run As -> Run Configuration -> Arguments -> VM Arguments -> 
--module-path C:\java-libs\javafx-sdk\lib --add-modules=javafx.fxml,javafx.controls

Criar arquivo FXML = Botão direito no src -> New -> Package -> gui
Botão direito no gui -> New -> Other -> JavaFX -> New FXML Project
Botão direito no gui -> Open With Scene Builder

Associar ViewController.java ao Scene Builder = Controller -> Controller class
Associar ação à classe = Clicar na classe -> Code -> fx:id

Conectar Main ao FXML
	@Override
	public void start(Stage stage) {
		try {
			Parent parent = FXMLLoader.load(getClass().getResource("/gui/View.fxml"));
			Scene scene = new Scene(parent);
			stage.setScene(scene);
			stage.show();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
